#!/usr/bin/env node

var app = require('../app');
var config = require('../config');
var debug = require('debug')(config.projectName + ':server');
var fs = require('fs');

if (!fs.existsSync(config.ssl.privkeyPath) || !fs.existsSync(config.ssl.fullchainPath)) {
  console.error('Cannot find server certificate!');
  process.exit(1);
}
var https = require('https');

var options = {
  key: fs.readFileSync(config.ssl.privkeyPath),
  cert: fs.readFileSync(config.ssl.fullchainPath)
};
var port = normalizePort(config.port);
app.set('port', port);

app.enable('trust proxy');

var server = https.createServer(options, app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
